// <auto-generated />
using System;
using FFP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FFP.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231205170103_IncreaseMarginsInPostsSeed")]
    partial class IncreaseMarginsInPostsSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FFP.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppartmentNo = 60,
                            City = "Riyadh",
                            Country = "Saudi Arabia",
                            Street = "Tahlia Street"
                        },
                        new
                        {
                            Id = 2,
                            AppartmentNo = 30,
                            City = "Riyadh",
                            Country = "Saudi Arabia",
                            Street = "Al Sahafa Street"
                        },
                        new
                        {
                            Id = 3,
                            AppartmentNo = 25,
                            City = "Jeddah",
                            Country = "Saudi Arabia",
                            Street = "Hira Street"
                        });
                });

            modelBuilder.Entity("FFP.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AdminRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AdminRoleId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            AdminRoleId = 1,
                            BirthDate = new DateTime(2000, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "masalah.tech@gmail.com",
                            EncPassword = "M@zen852",
                            FirstName = "Mazen",
                            LastName = "Salah",
                            Nationality = "Yemen",
                            PersonalPhotoPath = "/uploads/mazen.jpg",
                            PhoneNumber = "00967774806897",
                            SecondName = "Ameen",
                            Status = true,
                            ThirdName = "Hamid",
                            Username = "masalah-tech"
                        });
                });

            modelBuilder.Entity("FFP.Models.AdminRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Super Admin"
                        });
                });

            modelBuilder.Entity("FFP.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clubs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LogoPath = "/uploads/al-hilal-club-logo.png",
                            Name = "Al-Hilal"
                        },
                        new
                        {
                            Id = 2,
                            LogoPath = "/uploads/al-raed-club-logo.png",
                            Name = "Al-Ra'ed"
                        },
                        new
                        {
                            Id = 3,
                            LogoPath = "/uploads/al-shabab-club-logo.png",
                            Name = "Al-Shabab"
                        },
                        new
                        {
                            Id = 4,
                            LogoPath = "/uploads/al-ittihad-club-logo.png",
                            Name = "Al-Ittihad"
                        },
                        new
                        {
                            Id = 5,
                            LogoPath = "/uploads/al-ettifaq-club-logo.png",
                            Name = "Al-Ettifaq"
                        },
                        new
                        {
                            Id = 7,
                            LogoPath = "/uploads/al-nassr-club-logo.png",
                            Name = "Al-Nassr"
                        },
                        new
                        {
                            Id = 8,
                            LogoPath = "/uploads/al-khaleej-club-logo.png",
                            Name = "Al-Khaleej"
                        },
                        new
                        {
                            Id = 9,
                            LogoPath = "/uploads/dortmund-club-logo.png",
                            Name = "Dortmund"
                        },
                        new
                        {
                            Id = 10,
                            LogoPath = "/uploads/newcastle-club-logo.png",
                            Name = "Newcastle"
                        },
                        new
                        {
                            Id = 11,
                            LogoPath = "/uploads/shakhtar-donetsk-club-logo.png",
                            Name = "Shakhtar Donetsk"
                        },
                        new
                        {
                            Id = 12,
                            LogoPath = "/uploads/barcelona-club-logo.png",
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = 13,
                            LogoPath = "/uploads/real-madrid-club-logo.png",
                            Name = "Real Madrid"
                        },
                        new
                        {
                            Id = 14,
                            LogoPath = "/uploads/lazio-club-logo.png",
                            Name = "Lazio"
                        },
                        new
                        {
                            Id = 15,
                            LogoPath = "/uploads/feyenoord-club-logo.png",
                            Name = "Feyenoord"
                        },
                        new
                        {
                            Id = 16,
                            LogoPath = "/uploads/porto-club-logo.png",
                            Name = "Porto"
                        },
                        new
                        {
                            Id = 17,
                            LogoPath = "/uploads/antwerp-club-logo.png",
                            Name = "Antwerp"
                        });
                });

            modelBuilder.Entity("FFP.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leagues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Roshn Saudi League"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Champions League"
                        },
                        new
                        {
                            Id = 3,
                            Title = "La Liga"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Premier League"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Seria A"
                        },
                        new
                        {
                            Id = 6,
                            Title = "World Cup"
                        });
                });

            modelBuilder.Entity("FFP.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Club1Goals")
                        .HasColumnType("int");

                    b.Property<int>("Club1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Club2Goals")
                        .HasColumnType("int");

                    b.Property<int>("Club2Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Club1Id");

                    b.HasIndex("Club2Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Club1Goals = 3,
                            Club1Id = 1,
                            Club2Goals = 2,
                            Club2Id = 2,
                            DateTime = new DateTime(2023, 5, 31, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 1
                        },
                        new
                        {
                            Id = 2,
                            Club1Id = 3,
                            Club2Id = 4,
                            DateTime = new DateTime(2030, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 1
                        },
                        new
                        {
                            Id = 3,
                            Club1Id = 5,
                            Club2Id = 2,
                            DateTime = new DateTime(2030, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 1
                        },
                        new
                        {
                            Id = 4,
                            Club1Id = 7,
                            Club2Id = 8,
                            DateTime = new DateTime(2030, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 1
                        },
                        new
                        {
                            Id = 5,
                            Club1Id = 9,
                            Club2Id = 10,
                            DateTime = new DateTime(2030, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 2
                        },
                        new
                        {
                            Id = 6,
                            Club1Id = 11,
                            Club2Id = 12,
                            DateTime = new DateTime(2030, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 2
                        },
                        new
                        {
                            Id = 7,
                            Club1Id = 14,
                            Club2Id = 15,
                            DateTime = new DateTime(2030, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 2
                        },
                        new
                        {
                            Id = 8,
                            Club1Id = 16,
                            Club2Id = 17,
                            DateTime = new DateTime(2030, 12, 16, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.MatchRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("MatchesRatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Bla Bla Bla",
                            Date = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MatchId = 1,
                            UserId = 1,
                            Value = 4
                        });
                });

            modelBuilder.Entity("FFP.Models.MatchRatingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("MatchRatingId")
                        .HasColumnType("int");

                    b.Property<int>("ReportTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchRatingId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("MatchRatingReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MatchRatingId = 1,
                            ReportTypeId = 4,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.MatchSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("MatchSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MatchId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("HTMLContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HTMLContent = "<p>What are the best football games? That question is not only guaranteed to spark plenty of debate but will also generate lots of different answers.</p><p>With that in mind, we have racked our brains to come up with what we believe are the best four football games for fans of all ages.</p><h4 class='fs-4 mt-3'>Football Quizzer</h4><p>If you fancy testing the depth of your football knowledge, the hugely immersive FootballQuizzer.com is well worth checking out.</p><p>The site contains dozens of different quizzes about clubs, players, stadiums, derby games and more, each of which can be tackled alone or with family and friends.</p><p>The site contains dozens of different quizzes about clubs, players, stadiums, derby games and more, each of which can be tackled alone or with family and friends. Alternatively, if you think you know all there is to know about Thierry Henry, there are quizzes devoted to the Gunners legend. Football Quizzer is great fun for people of all ages!</p><h4 class='fs-4 mt-3'>EA Sports FC 24</h4><p>Millions of fans worldwide believe the FIFA series is THE definitive football video game and it is difficult to argue with their viewpoint. Scheduled to be rebranded as EA Sports FC 24, this iconic game has sold more copies globally than any other sports-themed video game franchise.</p><p>The beauty of the game is it can be played by children and adults – sons and daughters can go head-to-head with their parents in a battle for family supremacy. With a massive global community behind it, FC 24 will remain the pinnacle of football video games for many more years. </p><h4 class='fs-4 mt-3'>Football Billionaire</h4><p>If online gaming leaves you feeling underwhelmed, there are plenty of football-themed board games you could consider playing instead. </p><p>The pick of the bunch is Football Billionaire – a fast-moving football trading game that will test your ability to become a successful club owner. </p><p>Your task is to take your chosen team to the top by negotiating sponsorship deals, winning trophies and increasing the value of your club. </p><p>Suitable for ages six to adult and for two to six players, the Football Billionaire board game has the capacity to provide you with endless hours of fun. </p><h4 class='fs-4 mt-3'>Football Manager</h4><p>We head back to the digital arena for our final recommendation, and this one is another game which has become an integral part of the football universe. It feels churlish to describe Football Manager as a ‘game’, as it is essentially an accurate simulator of what it feels like to manage a professional football club. </p><p>The challenges are endless in Football Manager. You can start in non-league and guide your team up the pyramid, or start with a big-hitter to test yourself against the best. The increasingly expansive nature of Football Manager means this is a game you will need to dedicate plenty of time to but the rewards are well worth the effort you put in. </p>",
                            PosterPath = "/uploads/post1.jpg",
                            Title = "The best football games for fans of all ages",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "I believe it is gonna be the best season ever. I'm really excited and cannot wait to see my best team take the cup.",
                            Date = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.PostCommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("PostCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("PostCommentLikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostCommentId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.PostCommentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("PostCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ReportTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostCommentId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PostCommentReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostCommentId = 1,
                            ReportTypeId = 4,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.PostLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.PostReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ReportTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            ReportTypeId = 4,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.PostSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.Prediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PredictedWinnerClub")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("Predictions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            MatchId = 2,
                            PredictedWinnerClub = 1,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            MatchId = 2,
                            PredictedWinnerClub = 0,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            MatchId = 2,
                            PredictedWinnerClub = 0,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            MatchId = 2,
                            PredictedWinnerClub = 0,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            MatchId = 2,
                            PredictedWinnerClub = 2,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            MatchId = 2,
                            PredictedWinnerClub = 2,
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            MatchId = 2,
                            PredictedWinnerClub = 2,
                            UserId = 16
                        },
                        new
                        {
                            Id = 17,
                            MatchId = 3,
                            PredictedWinnerClub = 1,
                            UserId = 11
                        },
                        new
                        {
                            Id = 18,
                            MatchId = 3,
                            PredictedWinnerClub = 2,
                            UserId = 12
                        },
                        new
                        {
                            Id = 19,
                            MatchId = 3,
                            PredictedWinnerClub = 0,
                            UserId = 13
                        },
                        new
                        {
                            Id = 20,
                            MatchId = 5,
                            PredictedWinnerClub = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            MatchId = 5,
                            PredictedWinnerClub = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 22,
                            MatchId = 5,
                            PredictedWinnerClub = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 23,
                            MatchId = 5,
                            PredictedWinnerClub = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 24,
                            MatchId = 5,
                            PredictedWinnerClub = 1,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("FFP.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MainPosterPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NewPrice")
                        .HasColumnType("float");

                    b.Property<double?>("OldPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainPosterPath = "/uploads/product1.jpg",
                            Name = "Nike Vapor Grip3 Goalkeeper Gloves – Black & Hyper Turq with Rush Fuschia with White",
                            NewPrice = 118.8
                        });
                });

            modelBuilder.Entity("FFP.Models.ProductCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "/uploads/product1_img1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Path = "/uploads/product1_img2.jpg",
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Awesome product. I really liked it",
                            Date = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            UserId = 2,
                            Value = 5
                        });
                });

            modelBuilder.Entity("FFP.Models.ProductSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Spam"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Hate speach or graphic violence"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Harassment or bullying"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Misinformation"
                        });
                });

            modelBuilder.Entity("FFP.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("StoreProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreProductId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 2,
                            Date = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StoreProductId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Just High Quality Items",
                            OwnerId = 1,
                            PosterPath = "/uploads/store1-poster.jpg",
                            Status = true
                        });
                });

            modelBuilder.Entity("FFP.Models.StoreProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoresProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InStock = 7,
                            ProductId = 1,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.StoreSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StoreId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FFP.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EncPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EncPassword = "slSe@#VSs1532",
                            FirstName = "Mohammed",
                            Gender = "Male",
                            LastName = "Hamza",
                            Status = true,
                            Username = "mohammedhamza"
                        },
                        new
                        {
                            Id = 2,
                            EncPassword = "23@fSF3@Fs",
                            FirstName = "Shaimaa",
                            Gender = "Female",
                            LastName = "Salim",
                            Status = true,
                            Username = "shaimaasalim"
                        },
                        new
                        {
                            Id = 3,
                            EncPassword = "@#$FSAF@#",
                            FirstName = "Osama",
                            Gender = "Male",
                            LastName = "Sameer",
                            Status = true,
                            Username = "osamasameer"
                        },
                        new
                        {
                            Id = 4,
                            EncPassword = "sF3#$Gs%#ss",
                            FirstName = "Mohammed",
                            Gender = "Male",
                            LastName = "Naser",
                            Status = true,
                            Username = "mohammednaser"
                        },
                        new
                        {
                            Id = 5,
                            EncPassword = "Sfe34%#2#5%",
                            FirstName = "Khalid",
                            Gender = "Male",
                            LastName = "Amer",
                            Status = true,
                            Username = "khalidamer"
                        },
                        new
                        {
                            Id = 6,
                            EncPassword = "@#FsdE323#",
                            FirstName = "Mahmoud",
                            Gender = "Male",
                            LastName = "Mansour",
                            Status = true,
                            Username = "mahmoudmansour"
                        },
                        new
                        {
                            Id = 7,
                            EncPassword = "234SDFe3#$",
                            FirstName = "Abdullah",
                            Gender = "Male",
                            LastName = "Saleh",
                            Status = true,
                            Username = "abdullahsaleh"
                        },
                        new
                        {
                            Id = 8,
                            EncPassword = "SDe2#@43S",
                            FirstName = "Nazar",
                            Gender = "Male",
                            LastName = "Hamoud",
                            Status = true,
                            Username = "nazarhamoud"
                        },
                        new
                        {
                            Id = 9,
                            EncPassword = "SSEFE23fs@#",
                            FirstName = "Abdulaziz",
                            Gender = "Male",
                            LastName = "Sultan",
                            Status = true,
                            Username = "abdulazizsultan"
                        },
                        new
                        {
                            Id = 10,
                            EncPassword = "&%sdfSE323",
                            FirstName = "Hattan",
                            Gender = "Male",
                            LastName = "Faisal",
                            Status = true,
                            Username = "hattanfaisal"
                        },
                        new
                        {
                            Id = 11,
                            EncPassword = "@##@SDFss3",
                            FirstName = "Thunaian",
                            Gender = "Male",
                            LastName = "Khalid",
                            Status = true,
                            Username = "thunaiankhalid"
                        },
                        new
                        {
                            Id = 12,
                            EncPassword = "!!324sdSdfF43",
                            FirstName = "Mohammed",
                            Gender = "Male",
                            LastName = "Hamza",
                            Status = true,
                            Username = "mohammedhamza"
                        },
                        new
                        {
                            Id = 13,
                            EncPassword = "((^77456FDg3",
                            FirstName = "Somayah",
                            Gender = "Female",
                            LastName = "Omar",
                            Status = true,
                            Username = "somayahomar"
                        },
                        new
                        {
                            Id = 14,
                            EncPassword = "@@342SDfe2",
                            FirstName = "Kholod",
                            Gender = "Female",
                            LastName = "Ahmed",
                            Status = true,
                            Username = "kholodahmed"
                        },
                        new
                        {
                            Id = 15,
                            EncPassword = "!@#SDFdf323",
                            FirstName = "Taha",
                            Gender = "Male",
                            LastName = "Abdulghafour",
                            Status = true,
                            Username = "tahaabdulghafour"
                        },
                        new
                        {
                            Id = 16,
                            EncPassword = "Ssdfe@#234S",
                            FirstName = "Salma",
                            Gender = "Female",
                            LastName = "Adel",
                            Status = true,
                            Username = "salmaadel"
                        });
                });

            modelBuilder.Entity("FFP.Models.UserSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("SavedUserId")
                        .HasColumnType("int");

                    b.Property<int>("SavingUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SavedUserId");

                    b.HasIndex("SavingUserId");

                    b.ToTable("UserSaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SavedUserId = 2,
                            SavingUserId = 1
                        });
                });

            modelBuilder.Entity("FFP.Models.Admin", b =>
                {
                    b.HasOne("FFP.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.AdminRole", "AdminRole")
                        .WithMany()
                        .HasForeignKey("AdminRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AdminRole");
                });

            modelBuilder.Entity("FFP.Models.Cart", b =>
                {
                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.Match", b =>
                {
                    b.HasOne("FFP.Models.Club", "Club1")
                        .WithMany()
                        .HasForeignKey("Club1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.Club", "Club2")
                        .WithMany()
                        .HasForeignKey("Club2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club1");

                    b.Navigation("Club2");

                    b.Navigation("League");
                });

            modelBuilder.Entity("FFP.Models.MatchRating", b =>
                {
                    b.HasOne("FFP.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.MatchRatingReport", b =>
                {
                    b.HasOne("FFP.Models.MatchRating", "MatchRating")
                        .WithMany()
                        .HasForeignKey("MatchRatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MatchRating");

                    b.Navigation("ReportType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.MatchSave", b =>
                {
                    b.HasOne("FFP.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.Post", b =>
                {
                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.PostComment", b =>
                {
                    b.HasOne("FFP.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.PostCommentLike", b =>
                {
                    b.HasOne("FFP.Models.PostComment", "PostComment")
                        .WithMany()
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PostComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.PostCommentReport", b =>
                {
                    b.HasOne("FFP.Models.PostComment", "PostComment")
                        .WithMany()
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PostComment");

                    b.Navigation("ReportType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.PostLike", b =>
                {
                    b.HasOne("FFP.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.PostReport", b =>
                {
                    b.HasOne("FFP.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("ReportType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.PostSave", b =>
                {
                    b.HasOne("FFP.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.Prediction", b =>
                {
                    b.HasOne("FFP.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.ProductCart", b =>
                {
                    b.HasOne("FFP.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FFP.Models.ProductPhoto", b =>
                {
                    b.HasOne("FFP.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FFP.Models.ProductReview", b =>
                {
                    b.HasOne("FFP.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.ProductSave", b =>
                {
                    b.HasOne("FFP.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.Sale", b =>
                {
                    b.HasOne("FFP.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.StoreProduct", "StoreProduct")
                        .WithMany()
                        .HasForeignKey("StoreProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("StoreProduct");
                });

            modelBuilder.Entity("FFP.Models.Store", b =>
                {
                    b.HasOne("FFP.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FFP.Models.StoreProduct", b =>
                {
                    b.HasOne("FFP.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("FFP.Models.StoreSave", b =>
                {
                    b.HasOne("FFP.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FFP.Models.UserSave", b =>
                {
                    b.HasOne("FFP.Models.User", "SavedUser")
                        .WithMany()
                        .HasForeignKey("SavedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FFP.Models.User", "SavingUser")
                        .WithMany()
                        .HasForeignKey("SavingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SavedUser");

                    b.Navigation("SavingUser");
                });
#pragma warning restore 612, 618
        }
    }
}
